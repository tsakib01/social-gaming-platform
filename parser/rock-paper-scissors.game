// These are examples of core properties of a game that might be
// configured when setting up an instance or lobby for a game.
configuration {
  name: "Rock, Paper, Scissors"
  player range: (2, 4)
  audience: false
  setup: {
    rounds {
      kind: integer
      prompt: "The number of rounds to play"
      range: (1, 20)
    }
  }
}

// Global constants can be expressed in a JSON-like format.
constants {
  weapons: [
    { name: "Rock",     beats: "Scissors" },
    { name: "Paper",    beats: "Rock"     },
    { name: "Scissors", beats: "Paper"    },
  ]
}

// The same is true of the initial values for global variables.
variables {
  winners: []
}

// The per player state exists independently for each player, so
// initializing `wins` below to 0 creates a counter for each player and
// initializes it to 0.
per-player {
  wins: 0
}

// If there were some form of audience participation, the state for each
// audience member could also be tracked separately. What sorts of
// considerations might that imply for implementing it?
per-audience {}

// Finally, the rules of the game execute as previously described after the
// game has been started.
rules {
  for round in configuration.rounds.upfrom(1) {

    discard winners.size() from winners;

    message all "Round {round}. Choose your weapon!";

    parallel for player in players {
      input choice to player {
        prompt: "{player.name}, choose your weapon!"
        choices: weapons.name
        target: player.name
        timeout: 10
      }
    }

    for weapon in weapons {
      match !players.elements.weapon.contains(weapon.name) {
        true => {
          extend winners with players.elements.collect(player, player.weapon = weapon.beats);
        }
      }
    }

    match true {
      winners.size() = players.size() || winners.size() = 0 => {
        message all "Tie game!";
      }
      true => {
        message all "Winners: {winners.elements.name}";
        for winner in winners {
          winner.wins <- winner.wins + 1;
        }
      }
    }
  }

  // Report the final scores!
  scores ["wins"];
}
